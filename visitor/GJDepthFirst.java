/*
* First pass find the live range of each temporary
* Second pass, allocate 
*
*/



//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   

    private HashMap<String,FuncMeta> fnList;  //function name and its details
    private FuncMeta fnMeta;  //current function object
    private int spillMax; //total spill in the current function 
    private int stmtNo; //current statement no. with respect to current function
    private HashMap<String,Pair> currMap; //temporary name and the pair object in the current function
    private LinkedList<Integer> tRegisters; //available t registers
    private String[] tRegUse; //temporary using t registers
    private String[]  sRegUse;  //temporary using s registers
    private LinkedList<Integer> sRegisters; //available s registers
    private PriorityQueue<Integer> spillList; //available spill positions
    private int totalArg; //total arguments in the function call
    private String[] vRegs; //temporary using the v registers
    private int params; //formal paramater in a procedure
    private ArrayList<String> paramList;

    private void initTRegs(LinkedList<Integer> tRegisters) {
      tRegisters.clear();
      for (int i=9; i>=0; --i) {
        tRegisters.addFirst(i);
      }
    }

    private void initSRegs(LinkedList<Integer> regs) {
      regs.clear();
      for (int i=0; i<8; ++i) {
        regs.addLast(i);
      }
    }

  public GJDepthFirst() {
    fnList = new HashMap<String,FuncMeta>();
    tRegisters = new LinkedList<Integer>();
    vRegs = new String[]{"", ""};
    paramList = new ArrayList<String>();
    initTRegs(tRegisters);
    params = 0;
    stmtNo = 0;
    spillMax = 0;
    spillList = new PriorityQueue<Integer>();
  }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      if ((Integer)argu == 0) {
        fnMeta = new FuncMeta();
        currMap = fnMeta.hm;
        fnList.put("MAIN",fnMeta);
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      // n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      // System.out.println(currMap.toString());
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String label = (String)n.f0.accept(this, null);
      n.f1.accept(this, argu);
      String pm = (String)n.f2.accept(this, argu);
      params = Integer.parseInt(pm);
      spillMax = params;
      if ((Integer)argu == 0) {
        fnMeta = new FuncMeta();
        currMap = fnMeta.hm;
        fnList.put(label,fnMeta);
      } else {
        fnMeta = fnList.get(label);
        currMap = fnMeta.hm;
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      ++stmtNo;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      if ((Integer)argu == 0) {
        if (currMap.containsKey(tm)) {
            currMap.get(tm).second = stmtNo;
        } else {
            currMap.put(tm,new Pair(stmtNo));
        }
      }
      // oneTemp(tm, (Integer)argu);
      n.f2.accept(this, null);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, null);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      ++stmtNo;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String temp = (String)n.f3.accept(this, argu);
      if ((Integer)argu == 0) {
        if (currMap.containsKey(tm)) {
            currMap.get(tm).second = stmtNo;
        } else {
            currMap.put(tm,new Pair(stmtNo));
        }
        if (currMap.containsKey(temp)) {
            currMap.get(temp).second = stmtNo;
        } else {
            currMap.put(temp,new Pair(stmtNo));
        }
      }
      // twoTemp(tm, temp, (Integer)argu);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      ++stmtNo;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      String temp = (String)n.f2.accept(this, argu);
      // twoTemp(tm, temp, (Integer)argu);
      String lt = (String)n.f3.accept(this, argu);
      if ((Integer)argu == 0) {
        if (currMap.containsKey(tm)) {
            currMap.get(tm).second = stmtNo;
        } else {
            currMap.put(tm,new Pair(stmtNo));
        }
        if (currMap.containsKey(temp)) {
            currMap.get(temp).second = stmtNo;
        } else {
            currMap.put(temp,new Pair(stmtNo));
        }
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      ++stmtNo;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      // oneTemp(tm, (Integer)argu);
      String exp = (String)n.f2.accept(this, argu);
      if ((Integer)argu == 0) {
        if (currMap.containsKey(tm)) {
            currMap.get(tm).second = stmtNo;
        } else {
            currMap.put(tm,new Pair(stmtNo));
        }
        if (exp != null) {
          if (currMap.containsKey(exp)) {
            currMap.get(exp).second = stmtNo;
          }
        }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      ++stmtNo;
      if ((Integer)argu == 0) {
        if (currMap.containsKey(tm)) {
            currMap.get(tm).second = stmtNo;
        }
      }
      // simpleTemp(tm, (Integer)argu);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String tm = (String)n.f3.accept(this, argu);
      ++stmtNo;
      n.f4.accept(this, argu);
      if ((Integer)argu == 0) {
        if (currMap.containsKey(tm)) {
          currMap.get(tm).second = stmtNo; 
        }
      }
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      totalArg = 0;
      // if ((Integer)arg == 0) {
      //   argList.clear();
      // }
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      simpleTemp(tm, (Integer)argu);
      n.f2.accept(this, argu);
      if ((Integer)argu == 0) {
        n.f3.accept(this, (A)(new Integer(4)));
        if (fnMeta.maxArg < totalArg) {
          fnMeta.maxArg = totalArg;
        }
        fnMeta.tRegs.put(stmtNo, new LinkedList<Integer>(tRegisters));
      } else {
        n.f3.accept(this, argu);
      }
      // n.f4.accept(this, argu);
      // else if ((Integer)argu == 1) {
      //   int[] tR = {0,0,0,0,0,0,0,0,0};
      //   Iterator itr = tRegisters.listIterator();
      //   int temp;
      //   while (itr.hasNext()) {
      //     temp = (int)itr.next();
      //     tR[temp] = 1;
      //   }
      //   for (int i=0; i<10 && !sRegisters.isEmpty(); ++i) {
      //     if (tR[i] == 0) {
      //       Pair pair = currMap.get("");
      //     }
      //   }
      // }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      if ((Integer)argu == 0) {
        if (currMap.containsKey(tm)) {
          currMap.get(tm).second = stmtNo;
        }
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      String temp = (String)n.f2.accept(this, argu);
      int sw = (Integer)argu;
      if ((Integer)argu == 0) {
        if (currMap.containsKey(tm)) {
          currMap.get(tm).second = stmtNo;
        } else {
          currMap.put(tm, new Pair(stmtNo));
        }
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lt = (String)n.f1.accept(this, argu);
      _ret = (R)("TEMP "+lt);
      if ((Integer)argu == 4) { //finding live range of temp in function parameter
        ++totalArg;
        if (currMap.containsKey((String)_ret)) {
            currMap.get((String)_ret).second = stmtNo;
        }
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.toString();
      if (argu != null && (Integer)argu == 2) { //print label
        System.out.print(n.f0.toString()+" ");
      }
      return _ret;
   }


   public void twoTemp(String tm, String temp, int argu) {
    // ++stmtNo;
      if (argu == 0) {
        if (currMap.containsKey(tm)) {
          currMap.get(tm).second = stmtNo;
        } else {
          Pair pr = new Pair(stmtNo);
          currMap.put(tm, pr);
        }
        if (currMap.containsKey(temp)) {
          currMap.get(temp).second = stmtNo;
        } else {
          Pair pair = new Pair(stmtNo);
          currMap.put(temp, pair);
        }
      } else {
        Pair fm = currMap.get(tm);
        Pair meta = currMap.get(temp);
        if (fm.register==-1) {
          if (tRegisters.isEmpty()) {
            if (fm.spillNo != -1){
              System.out.print("spill "+fm.spillNo+" ");
            } else {
              int no = getSpilledNo();
              System.out.print("spill "+no+" ");
            }
          } else {
            int rg = tRegisters.removeFirst();
            fm.register = rg;
            System.out.print(""+fm.rType+fm.register+" ");
          }
        } else {
          int rs = fm.register;
          System.out.print(""+fm.rType+rs+" ");
        }
        if (meta.register==-1) {
          if (tRegisters.isEmpty()) {
            if (meta.spillNo != -1){
              System.out.println("spill "+meta.spillNo);
            } else {
              int no = getSpilledNo();
              System.out.println("spill "+no);
            }
          } else {
            int rg = tRegisters.removeFirst();
            meta.register = rg;
            System.out.println("t"+rg);
          }
        } else {
          int rs = meta.register;
          System.out.println(""+meta.rType+rs);
        }
        if (stmtNo >= fm.second) {
          if (!(fm.register==-1)) {
            tRegisters.addLast(fm.register);
          } else if (fm.spillNo != -1) {
            addSpilledNo(fm.spillNo);
          }
        }
        if (stmtNo >= meta.second) {
          if (!(meta.register==-1)) {
            tRegisters.addLast(meta.register);
          } else if (fm.spillNo != -1) {
            addSpilledNo(fm.spillNo);
          }
        }
      }
   }

   public void simpleTemp(String tm, int argu) {
      if (argu == 0) {
          if (currMap.containsKey(tm)) {
            currMap.get(tm).second = stmtNo;
          }
      } else {
          if (currMap.containsKey(tm)) {
            if (currMap.get(tm).register==-1) {
              System.out.println("spilled "+currMap.get(tm).spillNo);
            } else {
              System.out.println(currMap.get(tm).register);
            }
          if (stmtNo >= currMap.get(tm).second) {
            if (!(currMap.get(tm).register==-1)) {
              tRegisters.addLast(currMap.get(tm).register);
            }
          }
          } else {
            System.out.println("PRINT "+tm);
          }
      }
   }

   public int getSpilledNo() {
      int no;
      if (spillList.isEmpty()) {
        no = spillMax++;
      } else {
        no = spillList.poll();
      }
      return no;
   }
   public void addSpilledNo(int a) {
      spillList.add(a);
   }

   public void oneTemp(String tm, int argu) {
      // ++stmtNo;
      if (argu == 0) {
        if (currMap.containsKey(tm)) {
          currMap.get(tm).second = stmtNo;
        } else {
          Pair pr = new Pair(stmtNo);
          currMap.put(tm, pr);
        }
      } else {
        Pair fm = currMap.get(tm);
        if (fm.register==-1) {
          if (tRegisters.isEmpty()) {
            if (fm.spillNo != -1){
              System.out.println("spill "+fm.spillNo);
            } else {
              int no = getSpilledNo();
              System.out.println("spill "+no);
            }
          } else {
            int rg = tRegisters.removeFirst();
            fm.register = rg;
            System.out.println(""+fm.rType+rg);
          }
        } else {
          int rs = fm.register;
          System.out.println(""+fm.rType+rs);
        }
        if (stmtNo >= currMap.get(tm).second) {
          if (!(fm.register == -1)) {
            tRegisters.addLast(fm.register);
          } else if (fm.spillNo != -1) {
            addSpilledNo(fm.spillNo);
          }
        }
      }
   }

}

class FuncMeta{
  public HashMap<String,Pair> hm;
  public LinkedList<Integer> sRegisters;
  public HashMap<Integer,LinkedList<Integer>> tRegs;
  public int maxArg;
  public int space;
  public FuncMeta() {
    space = 0;
    maxArg = 0;
    hm = new HashMap<String,Pair>();
    tRegs = new HashMap<Integer,LinkedList<Integer>>();
    sRegisters = new LinkedList<Integer>();
    for (int i=0; i<8; ++i) {
      sRegisters.addLast(i);
    }
  }
}

class Pair{
  public int first;
  public int second;
  public int spillNo;
  public int register;
  public char rType;
  public Pair(int ln){
    first = ln;
    second = ln;
    register = -1;
    spillNo = -1;
  }
  public String toString() {
    return "("+first+","+second+")";
  }
}