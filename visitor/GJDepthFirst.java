/*
* First pass find the live range of each temporary
* Second pass, allocate 
*
*/



//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   

    private HashMap<String,FuncMeta> fnList;  //function name and its details
    private FuncMeta fnMeta;  //current function object
    private int spillMax; //total spill in the current function 
    private int stmtNo; //current statement no. with respect to current function
    private HashMap<String,Pair> currMap; //temporary name and the pair object in the current function
    private int totalArg; //total arguments in the function call
    private int params; //formal paramater in a procedure
    private HashMap<String,Integer> labels;
    private HashMap<Integer,String> gotos;
    private ArrayList<String> paramList;
    private LinkedList<Integer> tRegister, sRegister;

  public GJDepthFirst() {
    fnList = new HashMap<String,FuncMeta>();
    paramList = new ArrayList<String>();
    labels = new HashMap<String,Integer>();
    gotos = new HashMap<Integer,String>();
    sRegister = new LinkedList<Integer>();
    tRegister = new LinkedList<Integer>();
    params = 0;
    stmtNo = 0;
    spillMax = -1;
  }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
        stmtNo = 0;
        spillMax = -1;
      if ((Integer)argu == 0) {
        fnMeta = new FuncMeta();
        currMap = fnMeta.hm;
        fnList.put("MAIN",fnMeta);
      } else {
        fnMeta = fnList.get("MAIN");
        currMap = fnMeta.hm;
        fnMeta.space = 10;
        int space = fnMeta.space + 9 + fnMeta.spillMax;
        System.out.println("MAIN [0]["+space+"]["+fnMeta.maxArg+"]");
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if ((Integer)argu == 0) {
      	allocateRegisters();
      } else {
        System.out.println("END");
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if ((Integer)argu == 1) {
        System.out.println("// Number of  vars after packing = 0; Number of Spilled vars = 0");
      }
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      stmtNo = 0;
      spillMax = -1;
      String label = (String)n.f0.accept(this, null);
      n.f1.accept(this, argu);
      String pm = (String)n.f2.accept(this, argu);
      params = Integer.parseInt(pm);
      if ((Integer)argu == 0) {
        labels.clear();
        gotos.clear();
        fnMeta = new FuncMeta();
        currMap = fnMeta.hm;
        fnList.put(label,fnMeta);
        for (int i=0; i<params; ++i) {
          currMap.put("TEMP "+i, new Pair(stmtNo));
        }
        if (params > 4) {
        	spillMax = params - 5;
        }
      } else {
        fnMeta = fnList.get(label);
        currMap = fnMeta.hm;
          fnMeta.space = 10;
          int space = fnMeta.space + 9 + fnMeta.spillMax;
          System.out.println(label+" ["+pm+"]["+space+"]["+fnMeta.maxArg+"]");
          int spNo = fnMeta.spillMax;
          for (int i=0; i<8; ++i) {
            ++spNo;
            System.out.println("ASTORE SPILLEDARG "+spNo+" s"+i);
          }
          spNo = params;
          if (spNo > 4) {
            spNo = 4;
          }
          for (int i=0; i<spNo; ++i) {
            Pair p = currMap.get("TEMP "+i);
            if (p != null && p.altdR) {  //null means it is not used in the function
              if (p.spillNo == -1) {
                System.out.println("MOVE "+p.rType+p.register+" a"+i);
              } else {
                System.out.println("ASTORE SPILLEDARG "+p.spillNo+" a"+i);
              }
            }
          }
          int k=0;
          for (int i=spNo; i < params; ++i, ++k) {
            Pair p = currMap.get("TEMP "+i);
            if (p != null && p.altdR) {
              if (p.spillNo == -1) {
                System.out.println("ALOAD "+p.rType+p.register+" SPILLEDARG "+k);
              } else {
                System.out.println("ALOAD v1 SPILLEDARG "+k);
                System.out.println("ASTORE SPILLEDARG "+p.spillNo+" v1");
              }
            }
          }
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if ((Integer)argu == 0) {
      	allocateRegisters();
      } else {
        int spNo = fnMeta.spillMax;
        for (int i=0; i<8; ++i) {
        	++spNo;
          System.out.println("ALOAD s"+i+" SPILLEDARG "+spNo);
        }
        System.out.println("END");
      }
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      ++stmtNo;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if ((Integer)argu == 1) {
        System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if ((Integer)argu == 1) {
        System.out.println("ERROR");
      }
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      String lb = (String)n.f2.accept(this, null);
      if ((Integer)argu == 0) {
        gotos.put(stmtNo, lb);
      } else {
        Pair pair = currMap.get(tm);
        String reg = "";
        if (pair.spillNo != -1) {
          reg = "v1";
          System.out.println("ALOAD v1 SPILLEDARG "+pair.spillNo);
        } else {
          reg = pair.rType+pair.register;
        }
        System.out.println("CJUMP "+reg+" "+lb);
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lb = (String)n.f1.accept(this, null);
      if ((Integer)argu == 0) {
        gotos.put(stmtNo, lb);
      } else {
        System.out.println("JUMP "+lb);
      }
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      String lt = (String)n.f2.accept(this, argu);
      String temp = (String)n.f3.accept(this, argu);
      if ((Integer)argu == 1) {
        String reg_tm;
        Pair pair = currMap.get(tm);
        if (pair.spillNo == -1) {
          reg_tm = pair.rType+pair.register;
        } else {
          reg_tm = "v0";
          System.out.println("ALOAD v0 SPILLEDARG "+pair.spillNo);
        }
        Pair pair_temp = currMap.get(temp);
        String reg_temp;
        if (pair_temp.spillNo == -1) {
          reg_temp = pair_temp.rType+pair_temp.register;
        } else {
          reg_temp = "v1";
          System.out.println("ALOAD v1 SPILLEDARG "+pair_temp.spillNo);
        }
        System.out.println("HSTORE "+reg_tm+" "+lt+" "+reg_temp);
      }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      String temp = (String)n.f2.accept(this, argu);
      String lt = (String)n.f3.accept(this, argu);
      if ((Integer)argu == 1) {
        String reg_tm;
        Pair pair = currMap.get(tm);
        if (pair.spillNo == -1) {
          reg_tm = pair.rType+pair.register;
        } else {
          reg_tm = "v0";
        }
        Pair pair_temp = currMap.get(temp);
        String reg_temp;
        if (pair_temp.spillNo == -1) {
          reg_temp = pair_temp.rType+pair_temp.register;
        } else {
          reg_temp = "v1";
          System.out.println("ALOAD v1 SPILLEDARG "+pair_temp.spillNo);
        }
        System.out.println("HLOAD "+reg_tm+" "+reg_temp+" "+lt);
        if (pair.spillNo != -1) {
          System.out.println("ASTORE SPILLEDARG "+pair.spillNo+" v0");
        }
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      String exp = (String)n.f2.accept(this, argu);
      if ((Integer)argu == 1) {
        String reg;
        Pair pair = currMap.get(tm);
        if (pair.spillNo == -1) {
          reg = pair.rType+pair.register;
        } else {
          reg = "v1";
        }
        if (currMap.containsKey(exp)) {
        	Pair pp = currMap.get(exp);
        	if (pp.spillNo == -1) {
        		exp = pp.rType+pp.register;
        	} else {
        		System.out.println("ALOAD v0 SPILLEDARG "+pp.spillNo);
        		exp = "v0";
        	}
        }
          System.out.println("MOVE "+reg+" "+exp);
        if (pair.spillNo != -1) {
          System.out.println("ASTORE SPILLEDARG "+pair.spillNo+" v1");
        }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      if ((Integer)argu == 1) {
        if (currMap.containsKey(tm)) {
          Pair pair = currMap.get(tm);
          String reg_tm;
          if (pair.spillNo == -1) {
            reg_tm = pair.rType+pair.register;
          } else {
            System.out.println("ALOAD v0 SPILLEDARG "+pair.spillNo);
            reg_tm = "v0";
          }
          System.out.println("PRINT "+reg_tm); 
        } else {
          System.out.println("PRINT "+tm);
        }
      }
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      ++stmtNo;
      String tm = (String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if ((Integer)argu == 1) {
        if (currMap.containsKey(tm)) {
          Pair pair = currMap.get(tm);
          String reg_tm;
          if (pair.spillNo == -1) {
            reg_tm = pair.rType+pair.register;
          } else {
            System.out.println("ALOAD v0 SPILLEDARG "+pair.spillNo);
            reg_tm = "v0";
          }
          System.out.println("MOVE v0 "+reg_tm); 
        } else {
          System.out.println("MOVE v0 "+tm);
        }
      }
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      totalArg = 0;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if ((Integer)argu == 0) {
        n.f3.accept(this, (A)(new Integer(4)));
        if (fnMeta.maxArg < totalArg) {
          fnMeta.maxArg = totalArg;
        }
      } else {
        paramList.clear();
        n.f3.accept(this,(A)(new Integer(5)));
        int sz = paramList.size();
        int i = 0;
        int size = 4;
        if (sz <= 4) {
          size = sz;
        }
        for (i=0; i<size; ++i) {
          Pair pair = currMap.get(paramList.get(i));
          if (pair.spillNo == -1) {
            System.out.println("MOVE a"+i+" "+pair.rType+pair.register);
          } else {
            System.out.println("ALOAD a"+i+" SPILLEDARG "+pair.spillNo);
          }
        }
        for (int k=1; i<sz; ++i, ++k) {
          Pair pair = currMap.get(paramList.get(i));
          if (pair.spillNo == -1) {
            System.out.println("PASSARG "+k+" "+pair.rType+pair.register);
          } else {
            System.out.println("ALOAD v0 SPILLEDARG "+pair.spillNo);
            System.out.println("PASSARG "+k+" v0");
          }
        }
        int bsize = fnMeta.spillMax + 8;
        for (i=0; i<10; ++i) {
          ++bsize;
          System.out.println("ASTORE SPILLEDARG "+bsize+" t"+i);
        }
        if (currMap.containsKey(tm)) {
        		Pair pp = currMap.get(tm);
        		if (pp.spillNo == -1) {
        			tm = pp.rType+pp.register;
        		} else {
        			System.out.println("ALOAD v1 SPILLEDARG "+pp.spillNo);
        			tm = "v1";
        		}
        }
        System.out.println("CALL "+tm);
        bsize = fnMeta.spillMax + 8;
        for(i=0; i<10; ++i) {
        	++bsize;
          System.out.println("ALOAD t"+i+" SPILLEDARG "+bsize);
        }
        _ret = (R)"v0";
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      if ((Integer)argu == 1) {
        String val = "HALLOCATE ";
        if (currMap.containsKey(tm)) {
          Pair pair = currMap.get(tm);
          String reg_tm;
          if (pair.spillNo == -1) {
            reg_tm = pair.rType+pair.register;
          } else {
            System.out.println("ALOAD v0 SPILLEDARG "+pair.spillNo);
            reg_tm = "v0";
          }
          val += reg_tm; 
        } else {
          val += tm;
        }
        _ret = (R)val;
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String ops = (String)n.f0.accept(this, argu);
      String tm = (String)n.f1.accept(this, argu);
      String temp = (String)n.f2.accept(this, argu);
      if ((Integer)argu == 1) {
        Pair pair_temp = currMap.get(tm);
        String reg_temp;
        if (pair_temp.spillNo == -1) {
          reg_temp = pair_temp.rType+pair_temp.register;
        } else {
          System.out.println("ALOAD v0 SPILLEDARG "+pair_temp.spillNo);
          reg_temp = "v0";
        }
        String reg_tm;
        if (currMap.containsKey(temp)) {
          Pair pair = currMap.get(temp);
          if (pair.spillNo == -1) {
            reg_tm = pair.rType+pair.register;
          } else {
            System.out.println("ALOAD v1 SPILLEDARG "+pair.spillNo);
            reg_tm = "v1";
          } 
        } else {
          reg_tm = temp;
        }
        String retval;
        if (ops.equals("LE")){
          ops = "LT";
          if (!reg_tm.equals("v1")) {
          	System.out.println("MOVE v1 "+reg_tm);
          	reg_tm = "v1";
          }
          System.out.println("MOVE v1 PLUS v1 1");
        	retval = "LT "+reg_temp+" v1";
        } else if (ops.equals("NE")) {
          System.out.println("MOVE a0 LT "+reg_tm+" "+reg_temp);
          System.out.println("MOVE a1 LT "+reg_temp+" "+reg_tm);
          retval = "PLUS a0 a1";
        } else {
        	retval = ops+" "+reg_temp+" "+reg_tm;
        }
        _ret = (R)retval;
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      if ((Integer)argu == 1) {
        _ret = n.f0.accept(this, (A)(new Integer(3)));
      } else {
        _ret = n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lt = (String)n.f1.accept(this, argu);
      String temp = "TEMP "+lt;
      if ((Integer)argu == 0) {
        if (!currMap.containsKey(temp)) {
          currMap.put(temp, new Pair(stmtNo));
        } else {
        	currMap.get(temp).second = stmtNo;
        }
      } else if ((Integer)argu == 4) { //finding live range of temp in function parameter
        ++totalArg;
        if (!currMap.containsKey(temp)) {
          currMap.put(temp, new Pair(stmtNo));
        } else {
        	currMap.get(temp).second = stmtNo;
        }
      }  else if ((Integer)argu == 5) {
        paramList.add(temp);
      }
      _ret = (R)temp;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.toString();
      if (argu != null){
      	if ((Integer)argu == 0) {
          labels.put((String)_ret, stmtNo+1);
      	} else if ((Integer)argu == 1){
          System.out.print(n.f0.toString()+" ");
      	}
      }
      return _ret;
   }

  private void liveAnalysis() {
	  Integer[] lids = gotos.keySet().toArray(new Integer[0]);
	  Arrays.sort(lids);
	  Set keys = currMap.keySet();
	  for (int i=0; i<lids.length; ++i) {
	    int last = labels.get(gotos.get(lids[i]));
	    if (last < lids[i]) {
	      Iterator it = keys.iterator();
	      while (it.hasNext()) {
	        Pair p = currMap.get(it.next());
	        if ( p.second < lids[i] && p.second >= last) {
	          p.second = lids[i];
	        }
	      }
	    }
  	}
  	sRegister.clear();
  	for (int i=0; i<8; ++i) {
  		sRegister.addLast(i);
  	}
  	tRegister.clear();
  	for (int i=0; i<10; ++i) {
  		tRegister.addLast(i);
  	}
  	String[] tempList = currMap.keySet().toArray(new String[0]);
  	Arrays.sort(tempList, new Comparator<String>() {
  		public int compare(String x, String y) {
  			return currMap.get(x).first - currMap.get(y).first;
  		}
  	});
  	LinkedList<Pair> active = new LinkedList<Pair>();
  	int size = tempList.length;
  	for (int i=0; i<size; ++i) {
  		Pair pair = currMap.get(tempList[i]);
  		pair.altdR = true;
  		expireIntervals(active, pair);
  		if (active.size() == 18) {
  			spillAtInterval(active, pair);
  		} else {
  			if (tRegister.isEmpty()) {
  				pair.rType = "s";
  				pair.register = sRegister.removeFirst();
  			} else {
  				pair.rType = "t";
  				pair.register = tRegister.removeFirst();
  			}
  			addFirstList(active, pair);
  		}
  	}
  }

  private void expireIntervals(LinkedList<Pair> active, Pair x) {
  	int size = active.size();
  	while (!active.isEmpty()) {
  		if (active.getFirst().second >= x.first) {
  			return;
  		}
  		Pair pair = active.removeFirst();
  		if (pair.rType.equals("t")) {
  			tRegister.addLast(pair.register);
  		} else {
  			sRegister.addFirst(pair.register);
  		}
  	}
  }

  private void addFirstList(LinkedList<Pair> active, Pair x) {
  	ListIterator<Pair> it = active.listIterator(0);
  	while (it.hasNext()) {
  		Pair p = it.next();
  		if (p.second > x.second) {
  			it.previous();
  			it.add(x);
  			return;
  		}
  	}
  	active.addLast(x);
  }

  private void spillAtInterval(LinkedList<Pair> active, Pair x) {
  	Pair spill = active.getLast();
  	if (spill.second > x.second) {
  		x.rType = spill.rType;
  		x.register = spill.register;
  		spill.spillNo = ++spillMax;
  		active.removeLast();
  		addFirstList(active, x);
  	} else {
  		x.spillNo = ++spillMax;
  	}
  }

   private void allocateRegisters() {
   		liveAnalysis();
   		fnMeta.spillMax = spillMax;
   }
}


class FuncMeta{
  public HashMap<String,Pair> hm;
  public HashSet<Integer> sRegs;
  public HashMap<Integer,HashSet<Integer>> tRegs;
  public int maxArg;
  public int space;
  public int spillMax;
  public FuncMeta() {
    space = 0;
    maxArg = 0;
    spillMax = 0;
    hm = new HashMap<String,Pair>();
    tRegs = new HashMap<Integer,HashSet<Integer>>();
    sRegs = new HashSet<Integer>();
  }
}

class Pair{
  public int first;
  public int second;
  public int spillNo;
  public int register;
  public String rType;
  public boolean altdR;
  public Pair(int ln){
    altdR = false;
    first = ln;
    second = ln;
    register = -1;
    spillNo = -1;
  }
  public String toString() {
    String temp = rType;
    if (temp != null) {
      temp += register;
    } else {
      temp = "sp"+spillNo;
    }
    return "("+first+","+second+","+temp+")\n";
  }
}