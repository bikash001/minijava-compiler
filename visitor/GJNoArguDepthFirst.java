//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   
  private String getTemp() {
    return "TEMP "+(++tempVal);
  }

  private void print(String str) {
    System.out.print(str);
  }

  private void println(String str) {
    System.out.println(str);
  }

  private int tempVal;
  private boolean calling;
  private Stack<String> params;
  private boolean needLabel;
   public GJNoArguDepthFirst() {
    tempVal = 100;
    calling = false;
    needLabel = true;
    params = new Stack();
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      println("MAIN");
      n.f1.accept(this);
      n.f2.accept(this);
      println("END");
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      needLabel = true;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      needLabel = false;
      String lb = (String)n.f0.accept(this);
      needLabel = true;
      n.f1.accept(this);
      String nt = (String)n.f2.accept(this);
      n.f3.accept(this);
      println(lb + " [ "+nt+" ] ");
      println("BEGIN");
      String mv = (String)n.f4.accept(this);
      println("RETURN "+mv);
      println("END");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String tmp = (String)n.f1.accept(this);
      needLabel = false;
      String lb = (String)n.f2.accept(this);
      needLabel = true;
      println(" CJUMP "+tmp+" "+lb);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      needLabel = false;
      String lb = (String)n.f1.accept(this);
      needLabel = true;
      println("JUMP "+lb);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String t1 = (String)n.f1.accept(this);
      String nt = (String)n.f2.accept(this);
      needLabel = false;
      String t2 = (String)n.f3.accept(this);
      needLabel = true;
      println("HSTORE "+t1+" "+nt+" "+t2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String t1 = (String)n.f1.accept(this);
      String t2 = (String)n.f2.accept(this);
      String nt = (String)n.f3.accept(this);
      println("HLOAD "+t1+" "+t2+" "+nt);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String tmp = (String)n.f1.accept(this);
      String t2 = (String)n.f2.accept(this);
      println("MOVE "+tmp+" "+t2);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String tmp = (String)n.f1.accept(this);
      println("PRINT "+tmp);
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n) {
      R _ret=null;
      boolean tp = calling;
      calling = false;
      String nt = (String)n.f0.accept(this);
      String tmp = getTemp();
      println("MOVE "+tmp+" "+nt);
      if (tp) {
        String st = params.pop();
        params.push(st.concat(tmp+" "));
      }
      calling = tp;
      return (R)tmp;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      n.f0.accept(this);
      // String tp = getTemp();
      // println("MOVE "+tp+" BEGIN");
      n.f1.accept(this);
      n.f2.accept(this);
      String tmp = (String)n.f3.accept(this);
      n.f4.accept(this);
      // println("RETURN "+tmp);
      // println("END");
      return (R)tmp;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      n.f0.accept(this);
      String exp = (String)n.f1.accept(this);
      calling = true;
      params.push("");
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      calling = false;
      String st = "CALL "+exp+" ( "+params.pop()+" )";
      return (R)st;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      String tmp = (String)n.f1.accept(this);
      String tp = "HALLOCATE "+tmp+"\n";
      return (R)tp;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      String op = (String)n.f0.accept(this);
      String tmp1 = (String)n.f1.accept(this);
      String tmp2 = (String)n.f2.accept(this);
      String st = op+" "+tmp1+" "+tmp2;
      return (R)st;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)n.f0.choice.toString();
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;
      n.f0.accept(this);
      String nt = (String)n.f1.accept(this);
      return (R)("TEMP "+nt+" ");
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)n.f0.toString();
      if (needLabel)
        print(n.f0.toString()+" ");
      return _ret;
   }

}
